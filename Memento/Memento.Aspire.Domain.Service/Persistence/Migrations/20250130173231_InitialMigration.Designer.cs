// <auto-generated />

namespace Memento.Aspire.Domain.Service.Migrations;

using Memento.Aspire.Domain.Service.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

[DbContext(typeof(DomainContext))]
[Migration("20250130173231_InitialMigration")]
public partial class InitialMigration
{
	/// <inheritdoc />
	protected override void BuildTargetModel(ModelBuilder modelBuilder)
	{
		#pragma warning disable 612, 618
		modelBuilder
			.HasAnnotation("ProductVersion", "9.0.1")
			.HasAnnotation("Relational:MaxIdentifierLength", 128);

		SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

		modelBuilder.Entity("Memento.Aspire.Domain.Service.Persistence.Entities.Author.Author", (builder) =>
		{
			builder.Property<Guid>("Id")
				.ValueGeneratedOnAdd()
				.HasColumnType("uniqueidentifier");

			builder.Property<DateOnly>("BirthDate")
				.HasColumnType("date");

			builder.Property<DateTimeOffset>("CreatedAt")
				.HasColumnType("datetimeoffset");

			builder.Property<Guid>("CreatedBy")
				.HasColumnType("uniqueidentifier");

			builder.Property<string>("Name")
				.IsRequired()
				.HasMaxLength(50)
				.HasColumnType("nvarchar(50)");

			builder.Property<DateTimeOffset?>("UpdatedAt")
				.HasColumnType("datetimeoffset");

			builder.Property<Guid?>("UpdatedBy")
				.HasColumnType("uniqueidentifier");

			builder.HasKey("Id");

			builder.HasIndex("BirthDate");

			builder.HasIndex("Name");

			builder.HasIndex("Name", "BirthDate")
				.IsUnique();

			builder.ToTable("Authors");
		});

		modelBuilder.Entity("Memento.Aspire.Domain.Service.Persistence.Entities.Book.Book", (builder) =>
		{
			builder.Property<Guid>("Id")
				.ValueGeneratedOnAdd()
				.HasColumnType("uniqueidentifier");

			builder.Property<Guid>("AuthorId")
				.HasColumnType("uniqueidentifier");

			builder.Property<DateTimeOffset>("CreatedAt")
				.HasColumnType("datetimeoffset");

			builder.Property<Guid>("CreatedBy")
				.HasColumnType("uniqueidentifier");

			builder.Property<Guid>("GenreId")
				.HasColumnType("uniqueidentifier");

			builder.Property<string>("Name")
				.IsRequired()
				.HasMaxLength(50)
				.HasColumnType("nvarchar(50)");

			builder.Property<DateOnly>("ReleaseDate")
				.HasColumnType("date");

			builder.Property<DateTimeOffset?>("UpdatedAt")
				.HasColumnType("datetimeoffset");

			builder.Property<Guid?>("UpdatedBy")
				.HasColumnType("uniqueidentifier");

			builder.HasKey("Id");

			builder.HasIndex("AuthorId");

			builder.HasIndex("GenreId");

			builder.HasIndex("Name");

			builder.HasIndex("ReleaseDate");

			builder.HasIndex("Name", "ReleaseDate")
				.IsUnique();

			builder.ToTable("Books");
		});

		modelBuilder.Entity("Memento.Aspire.Domain.Service.Persistence.Entities.Genre.Genre", (builder) =>
		{
			builder.Property<Guid>("Id")
				.ValueGeneratedOnAdd()
				.HasColumnType("uniqueidentifier");

			builder.Property<DateTimeOffset>("CreatedAt")
				.HasColumnType("datetimeoffset");

			builder.Property<Guid>("CreatedBy")
				.HasColumnType("uniqueidentifier");

			builder.Property<string>("Name")
				.IsRequired()
				.HasMaxLength(50)
				.HasColumnType("nvarchar(50)");

			builder.Property<DateTimeOffset?>("UpdatedAt")
				.HasColumnType("datetimeoffset");

			builder.Property<Guid?>("UpdatedBy")
				.HasColumnType("uniqueidentifier");

			builder.HasKey("Id");

			builder.HasIndex("Name")
				.IsUnique();

			builder.ToTable("Genres");
		});

		modelBuilder.Entity("Memento.Aspire.Domain.Service.Persistence.Entities.Book.Book", (builder) =>
		{
			builder.HasOne("Memento.Aspire.Domain.Service.Persistence.Entities.Author.Author", "Author")
				.WithMany("Books")
				.HasForeignKey("AuthorId")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired();

			builder.HasOne("Memento.Aspire.Domain.Service.Persistence.Entities.Genre.Genre", "Genre")
				.WithMany("Books")
				.HasForeignKey("GenreId")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired();

			builder.Navigation("Author");

			builder.Navigation("Genre");
		});

		modelBuilder.Entity("Memento.Aspire.Domain.Service.Persistence.Entities.Author.Author", (builder) =>
		{
			builder.Navigation("Books");
		});

		modelBuilder.Entity("Memento.Aspire.Domain.Service.Persistence.Entities.Genre.Genre", (builder) =>
		{
			builder.Navigation("Books");
		});
		#pragma warning restore 612, 618
	}
}
